// Generated by CoffeeScript 1.10.0
(function() {
  var Digit, DigitAggregator, Dockerfile, From, Letter, LetterAggregator, Morse, MorseAggregator, MultiRun, PrintWords, Run, Symbol, SymbolAggregator, Word, WordAggregator, should,
    slice = [].slice;

  MultiRun = require('../lib/commands/multi-run');

  Run = require('../lib/commands/run');

  Dockerfile = require('../lib/dockerfile');

  From = require('../lib/commands/from');

  should = require('should');

  PrintWords = (function() {
    PrintWords.aggregator = function() {
      return MultiRun.aggregator();
    };

    function PrintWords() {
      var arg, args, i, len;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      this.words = [];
      for (i = 0, len = args.length; i < len; i++) {
        arg = args[i];
        console.log('in PrintWords ' + arg.constructor.name);
        if (arg instanceof Word) {
          this.words.push(arg.word);
        } else if (arg instanceof Morse) {
          this.words.push(arg.code);
        } else {
          this.words = this.words.concat(arg.words);
        }
      }
      console.dir(this.words);
      this.run = "echo \"" + (this.words.join(' ')) + "\"";
    }

    PrintWords.prototype.overrides = function() {
      return false;
    };

    PrintWords.prototype.execForm = function() {
      return false;
    };

    return PrintWords;

  })();

  WordAggregator = (function() {
    function WordAggregator() {}

    WordAggregator.prototype.equals = function(what) {
      return what instanceof WordAggregator || what instanceof MorseAggregator;
    };

    WordAggregator.prototype.aggregate = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(PrintWords, args, function(){});
    };

    return WordAggregator;

  })();

  Word = (function() {
    Word.aggregator = function() {
      return new WordAggregator();
    };

    function Word() {
      var arg, args, i, len;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (typeof args[0] === 'string') {
        this.word = args[0];
      } else {
        this.letters = [];
        for (i = 0, len = args.length; i < len; i++) {
          arg = args[i];
          if (arg instanceof Letter) {
            this.letters.push(arg.letter);
          } else if (arg instanceof Symbol) {
            this.letters.push(arg.symbol);
          } else if (arg instanceof Digit) {
            this.letters.push(arg.digit);
          } else {
            this.letters = this.letters.concat(arg.letters);
          }
          this.word = this.letters.join('');
        }
      }
    }

    Word.prototype.overrides = function() {
      return false;
    };

    return Word;

  })();

  MorseAggregator = (function() {
    function MorseAggregator() {}

    MorseAggregator.prototype.equals = function(what) {
      return what instanceof MorseAggregator;
    };

    MorseAggregator.prototype.aggregate = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(PrintWords, args, function(){});
    };

    return MorseAggregator;

  })();

  Morse = (function() {
    Morse.aggregator = function() {
      return new MorseAggregator();
    };

    function Morse(code) {
      this.code = code;
    }

    Morse.prototype.overrides = function() {
      return false;
    };

    return Morse;

  })();

  LetterAggregator = (function() {
    function LetterAggregator() {}

    LetterAggregator.prototype.equals = function(what) {
      return what instanceof LetterAggregator;
    };

    LetterAggregator.prototype.aggregate = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Word, args, function(){});
    };

    return LetterAggregator;

  })();

  Letter = (function() {
    Letter.aggregator = function() {
      return new LetterAggregator();
    };

    function Letter(letter) {
      this.letter = letter;
    }

    Letter.prototype.overrides = function() {
      return false;
    };

    return Letter;

  })();

  SymbolAggregator = (function() {
    function SymbolAggregator() {}

    SymbolAggregator.prototype.equals = function(what) {
      return what instanceof SymbolAggregator;
    };

    SymbolAggregator.prototype.aggregate = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Word, args, function(){});
    };

    return SymbolAggregator;

  })();

  Symbol = (function() {
    Symbol.aggregator = function() {
      return new SymbolAggregator();
    };

    function Symbol(symbol) {
      this.symbol = symbol;
    }

    Symbol.prototype.overrides = function() {
      return false;
    };

    return Symbol;

  })();

  DigitAggregator = (function() {
    function DigitAggregator() {}

    DigitAggregator.prototype.equals = function(what) {
      return what instanceof DigitAggregator;
    };

    DigitAggregator.prototype.aggregate = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(Word, args, function(){});
    };

    return DigitAggregator;

  })();

  Digit = (function() {
    Digit.aggregator = function() {
      return new DigitAggregator();
    };

    function Digit(digit) {
      this.digit = digit;
    }

    Digit.prototype.overrides = function() {
      return false;
    };

    return Digit;

  })();

  describe('Aggregate', function() {
    return it('multiple levels', function() {
      var c, dockerfile, i, len, lines, ref;
      dockerfile = new Dockerfile();
      dockerfile.add(new From('scratch'));
      ref = 'first'.split('');
      for (i = 0, len = ref.length; i < len; i++) {
        c = ref[i];
        dockerfile.add(new Letter(c));
      }

      /*
      dockerfile.add(new Word('---...--.-.--'))
      for c in '#&@$'.split('')
        dockerfile.add(new Symbol(c))
      for c in '1670241'.split('')
        dockerfile.add(new Digit(c))
      dockerfile.add(new Run('true'))
       */
      lines = [];
      dockerfile.build(lines);
      return should(lines[1]).be.equal('RUN echo "first"');
    });
  });

}).call(this);
