// Generated by CoffeeScript 1.10.0
(function() {
  var Character, CharacterAggregator, Dockerfile, From, MultiRun, Package, PackageAggregator, Run, functions, should,
    slice = [].slice;

  MultiRun = require('../lib/commands/multi-run');

  Run = require('../lib/commands/run');

  Dockerfile = require('../lib/dockerfile');

  From = require('../lib/commands/from');

  should = require('should');

  functions = require('../lib/dockerfile-functions');

  PackageAggregator = (function() {
    function PackageAggregator() {
      this.packageAggregator = 'PACKAGE_AGGREGATE';
    }

    PackageAggregator.prototype.aggregator = function() {
      return Run.aggregator();
    };

    PackageAggregator.prototype.equals = function(what) {
      return (what.packageAggregator != null) && what.packageAggregator === this.packageAggregator;
    };

    PackageAggregator.prototype.aggregate = function() {
      var p, packages;
      packages = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new Run("apt-get -y install " + (((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = packages.length; i < len; i++) {
          p = packages[i];
          results.push(p["package"]);
        }
        return results;
      })()).join(' ')));
    };

    return PackageAggregator;

  })();

  Package = (function() {
    Package.aggregator = function() {
      return new PackageAggregator();
    };

    function Package(_package) {
      this["package"] = _package;
    }

    Package.prototype.overrides = function() {
      return false;
    };

    return Package;

  })();

  CharacterAggregator = (function() {
    function CharacterAggregator() {
      this.characterAggregator = 'CHARACTER_AGGREGATE';
    }

    CharacterAggregator.prototype.aggregator = function() {
      return Package.aggregator();
    };

    CharacterAggregator.prototype.equals = function(what) {
      return (what.characterAggregator != null) && what.characterAggregator === this.characterAggregator;
    };

    CharacterAggregator.prototype.aggregate = function() {
      var c, chars;
      chars = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return new Package(((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = chars.length; i < len; i++) {
          c = chars[i];
          results.push(c.char);
        }
        return results;
      })()).join(''));
    };

    return CharacterAggregator;

  })();

  Character = (function() {
    Character.aggregator = function() {
      return new CharacterAggregator();
    };

    function Character(char) {
      this.char = char;
    }

    Character.prototype.overrides = function() {
      return false;
    };

    return Character;

  })();

  describe('Aggregate', function() {
    it('second-level aggregation', function() {
      var dockerfile, list;
      list = [new Package('bc'), new Package('make'), new Package('libvirt')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN apt-get -y install bc make libvirt');
    });
    it('third-level aggregation', function() {
      var dockerfile, list;
      list = [new Character('m'), new Character('a'), new Character('k'), new Character('e')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN apt-get -y install make');
    });
    it('first-level, second-level mixed', function() {
      var dockerfile, list;
      list = [new Run('echo 123'), new Package('make'), new Run('echo 456'), new Package('bc')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN echo 123 && apt-get -y install make && echo 456 && apt-get -y install bc');
    });
    it('first, second, third', function() {
      var dockerfile, list;
      list = [new Run('echo 123'), new Package('make'), new Character('a')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN echo 123 && apt-get -y install make a');
    });
    it('third, second, first', function() {
      var dockerfile, list;
      list = [new Character('a'), new Package('make'), new Run('echo 123')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN apt-get -y install a make && echo 123');
    });
    it('first, third, second, third', function() {
      var dockerfile, list;
      list = [new Run('echo 123'), new Character('a'), new Package('bc'), new Character('b')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN echo 123 && apt-get -y install a bc b');
    });
    return it('all levels mixed', function() {
      var dockerfile, list;
      list = [new Character('b'), new Character('c'), new Package('make'), new Character('n'), new Character('a'), new Character('n'), new Character('o'), new MultiRun(new Run('echo 123')), new Package('libvirt'), new Run('echo 456')];
      functions.aggregate(list, 0);
      should(list.length).be.equal(1);
      dockerfile = [];
      list[0].applyTo({}, dockerfile);
      return should(dockerfile[0]).be.equal('RUN apt-get -y install bc make nano && echo 123 && apt-get -y install libvirt && echo 456');
    });
  });

}).call(this);
